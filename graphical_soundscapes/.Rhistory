knitr::opts_chunk$set(echo = TRUE)
df = read.csv('/Volumes/lacie_macosx/Dropbox/PostDoc/iavh/Ecos Urbanos/data_registros/consolidado_20200626.csv)
)
df = read.csv('/Volumes/lacie_macosx/Dropbox/PostDoc/iavh/Ecos Urbanos/data_registros/consolidado_20200626.csv')
df = read.csv('/Volumes/lacie_macosx/Dropbox/PostDoc/iavh/Ecos Urbanos/data_registros/consolidado_20200626.csv')
plot(table(df$email))
table(df$email)
sort(table(df$email))
plot(sort(table(df$email)))
hist(table(df$email))
hist(table(df$email), 30)
hist(table(df$email), 50)
hist(table(df$email), 100)
counts_participants = table(df$email)
hist(counts_participants, 100)
`r nrow(df)`
length(counts_participants)
df_sp = read.csv('/Volumes/lacie_macosx/Dropbox/PostDoc/iavh/Ecos Urbanos/data_registros/consolidado_capas_espaciales.csv')
22.050/4
quit()
25*40
quit()
library(tuneR)
knitr::opts_chunk$set(echo = TRUE)
s = readWave('../audio_ejemplo/pipra.wav')
s
library(seewave)
oscillo(s)
spectro(s, wl = 512)
meanspec(s, wl = 512)
24*60
quit()
## Alternative representations
library(tidyverse)
library(ggraph)
library(igraph)
data=data.frame(
level1 = "Paisaje sonoro",
level2 = c(rep("Biofonía",4), rep("Geofonía",4), rep("Antropofonía",4)),
level3 = paste0("sonido_", letters[1:12])
)
# transform it to a edge list!
edges_level1_2 = data %>% select(level1, level2) %>% unique %>% rename(from=level1, to=level2)
edges_level2_3 = data %>% select(level2, level3) %>% unique %>% rename(from=level2, to=level3)
edge_list=rbind(edges_level1_2, edges_level2_3)
# Now we can plot that
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point(color="#69b3a2", size=3) +
geom_node_text(
aes(  label=c("Paisaje\nSonoro", "Biofonía", "Geofonía", "Antropofonía",
'Mamíferos', 'Aves', 'Anfibios', 'Insectos',
'Lluvia', 'Arroyos', 'Truenos', 'Viento',
'Transporte', 'Construcción', 'Voces', 'A. domésticos') ),
hjust= c(0.5,0.5, 0.5, 0.5, rep(0.5,12)),
nudge_y = c(0, 0, 0, 0, rep(-0.1,12)),
nudge_x = c(0.7, 0.5, 0.5, 0.5, rep(0.3,12))  # transladar en y
) +
theme_void() +
coord_flip() +
scale_y_reverse()
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point(color="#69b3a2", size=3) +
geom_node_text(
aes(  label=c("Paisaje\nSonoro", "Biofonía", "Geofonía", "Antropofonía",
'Mamíferos', 'Aves', 'Anfibios', 'Insectos',
'Lluvia', 'Arroyos', 'Truenos', 'Viento',
'Transporte', 'Construcción', 'Voces', 'Animales domésticos') ),
hjust= c(0.5,0.5, 0.5, 0.5, rep(0.5,12)),
nudge_y = c(0, 0, 0, 0, rep(-0.1,12)),
nudge_x = c(0.7, 0.5, 0.5, 0.5, rep(0.3,12))  # transladar en y
) +
theme_void() +
coord_flip() +
scale_y_reverse()
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
geom_edge_diagonal() +
geom_node_point(color="#69b3a2", size=3) +
geom_node_text(
aes(  label=c("Paisaje\nSonoro", "Biofonía", "Geofonía", "Antropofonía",
'Mamíferos', 'Aves', 'Anfibios', 'Insectos',
'Lluvia', 'Arroyos', 'Truenos', 'Viento',
'Transporte', 'Construcción', 'Voces humanas', 'Animales domésticos') ),
hjust= c(0.5,0.5, 0.5, 0.5, rep(0.5,12)),
nudge_y = c(0, 0, 0, 0, rep(-0.1,12)),
nudge_x = c(0.7, 0.5, 0.5, 0.5, rep(0.3,12))  # transladar en y
) +
theme_void() +
coord_flip() +
scale_y_reverse()
install.packages('agricolae')
library(agricolae)
library(ggplot2)
library(Rmisc)
library(dplyr)
library(plyr)
library(doBy)
library(tidyr)
library(reshape)
library(stringr)
library(vegan)
library(cowplot)
library(funrar)
datos <- read.csv("~/Downloads/basefinal_abril2020.csv")
View(datos)
datos$inc=as.factor(datos$inc)
datos$rec=as.factor(datos$rec)
datos$tr=as.factor(datos$tr)
datos$p=as.factor(datos$p)
datos$h=as.numeric(datos$h)
datos$clase_ <- ordered(datos$clase_, levels = c("FR3-6", "FR3-1", "FR5-1"))
cuadrantes<- datos[which(datos$diametro==0), ]
parcelas<- datos[which(datos$diametro>=1 & datos$diametro<2.5), ]
transectos<- datos[which(datos$diametro>=2.5), ]
cuadrantes$codigo<-as.factor(paste(cuadrantes$clase_, cuadrantes$cod, cuadrantes$tr, sep="-"))
especies<- as.data.frame(table(cuadrantes$especie, cuadrantes$codigo))
especies2<- spread(especies, Var1, Freq)
nombres<-(especies2$Var2)
row.names(especies2)<-nombres
especies2$Var2<-NULL
indices<-as.data.frame(nombres)
indices$spp<-specnumber(especies2)
indices$inds<-rowSums(especies2)
x<-data.frame(clase=substr(indices$nombres, 1,5))
indices$clase<-x$clase
riq_cuad <- aov(spp ~ clase, data=indices)
summary(riq_cuad)
TukeyHSD(riq_cuad)
tuk_rich<- HSD.test(riq_cuad, "clase", group=TRUE, console = TRUE)
plot(tuk_rich)
abun_cuad <- aov(inds ~ clase, data=indices)
summary(abun_cuad)
parcelas$codigo<-as.factor(paste(parcelas$clase_, parcelas$cod, parcelas$tr, sep="-"))
especies<- as.data.frame(table(parcelas$especie, parcelas$codigo))
especies2<- spread(especies, Var1, Freq)
nombres<-(especies2$Var2)
row.names(especies2)<-nombres
especies2$Var2<-NULL
indices<-as.data.frame(nombres)
indices$spp<-specnumber(especies2)
indices$inds<-rowSums(especies2)
x<-data.frame(clase=substr(indices$nombres, 1,5))
indices$clase<-x$clase
#anova y grafico de riqueza
riq_parc <- aov(spp ~ clase, data=indices)
summary(riq_parc)
TukeyHSD(riq_parc)
tuk_rich<- HSD.test(riq_parc, "clase", group=TRUE, console = TRUE)
plot(riq_parc)
plot(tuk_rich)
abun_parc <- aov(inds ~ clase, data=indices)
summary(abun_parc)
TukeyHSD(abun_parc)
tuk_rich<- HSD.test(abun_parc, "clase", group=TRUE, console = TRUE)
plot(tuk_rich)
rm(list=ls())
library(seewave)
help(package='seewave')
version()
version
library(tuneR)
help('tuneR')
help(package='tuneR')
install.packages('ebvcube')
tmp <- installed.packages()
tmp
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
getwd()
save(installedpkgs, file="installed_old.rda")
load('installed_old.rda')
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
install.packages('ebvcube')
install.packages('DelayedArray')
devtools::install_github('https://github.com/LuiseQuoss/ebvcube')
install.packages('devtools')
devtools::install_github('https://github.com/LuiseQuoss/ebvcube')
library(ebvcube)
file <- system.file(file.path("extdata","martins_comcom_subset.nc"), package="ebvcube")
prop.file <- ebv_properties(file)
prop.file
file.path("extdata","martins_comcom_subset.nc"
file.path("extdata","martins_comcom_subset.nc")
file.path("extdata","martins_comcom_subset.nc")
prop.file@general[1:4]
slotNames(prop.file)
datacubes <- ebv_datacubepaths(file, verbose=FALSE)
file
dc <- datacubes[2,1]
ebv_map(file, dc, entity=1, timestep = 1, classes = 9,
verbose=FALSE, col_rev = T)
averages <- ebv_trend(file, dc, entity=1)
setwd("/Volumes/lacie_macosx/Dropbox/PostDoc/iavh/2023_Parex/workflows/graphical_soundscapes")
library(vegan)
library(ade4)
library(RColorBrewer)
library(yaml)
## LOAD CONFIGURATION VARIABLES
config <- yaml.load_file('../config.yaml')
path_gs = config$graph_soundscapes$path_save_gs  # location to save the dataframe
path_gs = "../../output/dataframes_gs/python_gs/"
sites = list.files(path_gs, pattern='*.csv')
# load data and organize as a community matrix (sites as rows, soundscape component (species) as columns)
tf_bins = list()
for(site in sites){
gs = read.csv(paste(path_gs,site,sep=''))
gs = gs[,19:129]
sensor_name = substr(site, 1, 10)
tf_bins[[sensor_name]] = as.vector(t(gs[,-1]))
}
tf_bins = as.data.frame(do.call(rbind, tf_bins))
rm_rows = c('t0_P3-G035', 't1_P3-G035', 't2_P3-G035', 't0_P4-G033', 't1_P4-G033', 't2_P4-G033')
tf_bins = tf_bins[!is.element(row.names(tf_bins), rm_rows),]
tf_bins_nmds = metaMDS(tf_bins, distance = 'bray', trymax = 500)
stressplot(tf_bins_nmds)  # validate model fit
tf_bins_nmds$stress
colors = RColorBrewer::brewer.pal(11, 'Paired')
plt_data = as.data.frame(tf_bins_nmds$points)
plt_data['period'] = substr(row.names(plt_data), 1, 2)
plt_data['site'] = substr(row.names(plt_data), 4, 5)
plot(plt_data[c('MDS1', 'MDS2')], col='gray', pch=16, bty='n',xlab='NMDS 1', ylab='NMDS 2', cex=0.5, cex.lab=1)
abline(v=0,col='gray',lty=2);abline(h=0,col='gray',lty=2)
s.class(plt_data[c('MDS1', 'MDS2')], fac=factor(plt_data$site), col = colors, add.plot = T)
text(x=plt_data$MDS1, y=plt_data$MDS2, labels = plt_data$period, col = 'gray50')
# load data and organize as a community matrix (sites as rows, soundscape component (species) as columns)
tf_bins = list()
for(site in sites){
gs = read.csv(paste(path_gs,site,sep=''))
gs = gs[,19:129]
sensor_name = substr(site, 1, 10)
tf_bins[[sensor_name]] = as.vector(t(gs[,-1]))
}
tf_bins = as.data.frame(do.call(rbind, tf_bins))
# Compute NMDS
tf_bins_nmds = metaMDS(tf_bins, distance = 'bray', trymax = 500)
stressplot(tf_bins_nmds)  # validate model fit
tf_bins_nmds$stress
# Plot results in 2D space
colors = RColorBrewer::brewer.pal(11, 'Paired')
plt_data = as.data.frame(tf_bins_nmds$points)
plt_data['period'] = substr(row.names(plt_data), 1, 2)
plt_data['site'] = substr(row.names(plt_data), 4, 5)
plt_data['site']
plot(plt_data[c('MDS1', 'MDS2')], col='gray', pch=16, bty='n',xlab='NMDS 1', ylab='NMDS 2', cex=0.5, cex.lab=1)
abline(v=0,col='gray',lty=2);abline(h=0,col='gray',lty=2)
s.class(plt_data[c('MDS1', 'MDS2')], fac=factor(plt_data$site), col = colors, add.plot = T)
text(x=plt_data$MDS1, y=plt_data$MDS2, labels = plt_data$period, col = 'gray50')
rm_rows = c('t0_P3-G035', 't1_P3-G035', 't2_P3-G035', 't0_P4-G033', 't1_P4-G033', 't2_P4-G033')
tf_bins = tf_bins[!is.element(row.names(tf_bins), rm_rows),]
# Compute NMDS
tf_bins_nmds = metaMDS(tf_bins, distance = 'bray', trymax = 500)
stressplot(tf_bins_nmds)  # validate model fit
tf_bins_nmds$stress
# Plot results in 2D space
colors = RColorBrewer::brewer.pal(11, 'Paired')
plt_data = as.data.frame(tf_bins_nmds$points)
plt_data['period'] = substr(row.names(plt_data), 1, 2)
plt_data['site'] = substr(row.names(plt_data), 4, 5)
plot(plt_data[c('MDS1', 'MDS2')], col='gray', pch=16, bty='n',xlab='NMDS 1', ylab='NMDS 2', cex=0.5, cex.lab=1)
abline(v=0,col='gray',lty=2);abline(h=0,col='gray',lty=2)
s.class(plt_data[c('MDS1', 'MDS2')], fac=factor(plt_data$site), col = colors, add.plot = T)
text(x=plt_data$MDS1, y=plt_data$MDS2, labels = plt_data$period, col = 'gray50')
plot(plt_data[c('MDS1', 'MDS2')], col='gray', pch=16, bty='n',xlab='NMDS 1', ylab='NMDS 2', cex=0.5, cex.lab=1, xlim=c(-1,1), ylim=c(-1,1))
abline(v=0,col='gray',lty=2);abline(h=0,col='gray',lty=2)
s.class(plt_data[c('MDS1', 'MDS2')], fac=factor(plt_data$site), col = colors, add.plot = T)
text(x=plt_data$MDS1, y=plt_data$MDS2, labels = plt_data$period, col = 'gray50')
dist = vegdist(tf_bins, 'bray') # using 2D data
treatment = substr(row.names(tf_bins), 4,5)=='P6'
permanova = adonis2(dist~treatment, permutations = 1000)
permanova
